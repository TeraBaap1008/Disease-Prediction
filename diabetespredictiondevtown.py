# -*- coding: utf-8 -*-
"""Diabetespredictiondevtown.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17BUWAPsNEugvRI4lhGTHNP4H8eWhuQgy
"""

pip install --upgrade tensorflow

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

diabetes = pd.read_csv("/content/diabetes.csv")

diabetes.head()

"""Handling Missing Values"""

diabetes.info()

diabetes = diabetes.replace("?", np.NaN, )

diabetes.isnull().sum()

diabetes["race"]

#Replacing missing race with previous value â€“ Forward fill

diabetes = diabetes.where(~diabetes.race.isnull(), diabetes.fillna(axis=0, method='ffill'))

diabetes.head()

count = (diabetes["race"] == "?").sum()

count

diabetes['weight'] = diabetes['weight'].fillna(diabetes['weight'].mode()[0])

diabetes = diabetes.where(~diabetes.payer_code.isnull(), diabetes.fillna(axis=0, method='ffill'))

diabetes = diabetes.where(~diabetes.medical_specialty.isnull(), diabetes.fillna(axis=0, method='ffill'))

diabetes = diabetes.where(~diabetes.diag_1.isnull(), diabetes.fillna(axis=0, method='ffill'))
diabetes = diabetes.where(~diabetes.diag_2.isnull(), diabetes.fillna(axis=0, method='ffill'))
diabetes = diabetes.where(~diabetes.diag_3.isnull(), diabetes.fillna(axis=0, method='ffill'))

diabetes.info()

"""EDA"""

diabetes.head()

df = diabetes.groupby(["race"]).size().sort_values(ascending = False)

df

Caucasian = diabetes.loc[diabetes["race"]=="Caucasian"].count()[0]
Afro_American = diabetes.loc[diabetes["race"]=="AfricanAmerican"].count()[0]
Hispanic = diabetes.loc[diabetes["race"]=="Hispanic"].count()[0]
Other = diabetes.loc[diabetes["race"]=="Other"].count()[0]
Asian = diabetes.loc[diabetes["race"]=="Asian"].count()[0]

plt.figure(figsize = [5,5], dpi = 100)
labels = ["Caucasian", "Afro-American", "Hispanic", "Other", "Asian"]
explode = [0,0.2,0.5,0.5,0.5]

plt.pie([Caucasian, Afro_American, Hispanic, Other, Asian], labels = labels, autopct = "%0.2f%%", explode = explode)
plt.title("Diabetes Patients by Race", fontdict = {"fontweight": "bold"})

plt.legend()
plt.show()

"""Caucasian are largest group of diabetic patients diagnosed, followed by Afro-American."""

df = diabetes.groupby(["gender"]).size().sort_values(ascending = False)

df

Male = diabetes.loc[diabetes["gender"]=="Male"].count()[0]
Female = diabetes.loc[diabetes["gender"]=="Female"].count()[0]
Other = diabetes.loc[diabetes["gender"]=="Other"].count()[0]

plt.figure(figsize = [5,5], dpi = 100)
labels = ["Male", "Female", "Other"]
colors = ["Blue", "Red", "Green"]

plt.pie([Male, Female, Other], colors = colors, labels = labels, autopct = "%0.2f%%")
plt.title("Diabetes Patients by Gender", fontdict = {"fontweight": "bold"})

plt.legend()
plt.show()

"""Females are marginally more in number than Males. Others are negligible."""

df = diabetes.groupby(["age"]).size()

df

df1 = pd.DataFrame(df)

df1.columns = ["Count"]

df1

df1["pct"] = (df1["Count"]/(df1["Count"].sum()))*100

df1["pct"]

df1

plt.figure(figsize = [8,5], dpi = 100)

plt.xlabel("Age Group --->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 15})  # to label the axis x and y
plt.ylabel("Percentage of Patients --->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 15})

plt.plot(df1["pct"], label = "Diabetes cases %", color = "red", linewidth = 3, marker = "*", markersize = 10)
plt.title("Diabetes Patients Percentage by Age Group", fontdict = {"fontweight": "bold"})

plt.yticks([0,5,10,15,20,25,30,35,40,45,50])

plt.legend()
plt.show()

"""Patients in age group [70-80) forms largest percentage of patients i.e. around 25%. While [0-10} form smallest percentage."""

t_in_h = pd.DataFrame(diabetes["time_in_hospital"].groupby(diabetes["age"]).mean())

t_in_h

l1 = list(t_in_h.index.values)
l2 = list(t_in_h["time_in_hospital"])

l1

l2

plt.figure(figsize = (7,4), dpi = 100)

bars = plt.bar(l1,l2, color = "green", hatch = "/")
plt.ylabel("Average Days in Hospital ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})
plt.xlabel("Age Group of Patients ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})

plt.title("Days Spent in Hospital by Diabetes Patients", fontdict = {"fontweight": "bold"})

plt.show()

"""Patients in age group of [80-90) spend high number of day in hospital on an average."""

num_lab = pd.DataFrame(diabetes["num_lab_procedures"].groupby(diabetes["age"]).mean())
l1 = list(num_lab.index.values)
l2 = list(num_lab["num_lab_procedures"])

plt.figure(figsize = (7,4), dpi = 100)

bars = plt.bar(l1,l2, color = "maroon", hatch = ".")
plt.ylabel("Average Number of Procedures ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})
plt.xlabel("Age Group of Patients ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})

plt.title("Average Number of Lab Procedures by Diabetes Patients", fontdict = {"fontweight": "bold"})

plt.show()

"""Average number of Lab Procedures are almost similar for all age groups with slight increase above age of 70"""

num_diag = pd.DataFrame(diabetes["number_diagnoses"].groupby(diabetes["age"]).mean())
l1 = list(num_diag.index.values)
l2 = list(num_diag["number_diagnoses"])

plt.figure(figsize = (7,4), dpi = 100)

bars = plt.bar(l1,l2, color = "navy", hatch = "+")
plt.ylabel("Average Number of Diagnoses ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})
plt.xlabel("Age Group of Patients ---->", fontdict = {"fontname": "Comic Sans MS", "fontsize": 12})

plt.title("Average Number of Diagnoses by Diabetes Patients", fontdict = {"fontweight": "bold"})

plt.show()

"""Average number of Diagnoses increase significantly during early age but becomes steady between 7-8 procedures after 60 year of age."""

df = diabetes.groupby(["insulin"]).size().sort_values(ascending = False)

df

Steady = diabetes.loc[diabetes["insulin"]=="Steady"].count()[0]
Down = diabetes.loc[diabetes["insulin"]=="Down"].count()[0]
Up = diabetes.loc[diabetes["insulin"]=="Up"].count()[0]

plt.figure(figsize = [5,5], dpi = 120)
labels = ["Steady", "Down", "Up"]

plt.pie([Steady, Down, Up], labels = labels, autopct = "%0.2f%%")
plt.title("Diabetes Patients by Insulin", fontdict = {"fontweight": "bold"})

plt.legend()
plt.show()

"""Majority of patients have insulin level steady"""

df = diabetes.groupby(["diabetesMed"]).size().sort_values(ascending = False)

df

Yes = diabetes.loc[diabetes["diabetesMed"]=="Yes"].count()[0]
No = diabetes.loc[diabetes["diabetesMed"]=="No"].count()[0]

plt.figure(figsize = [5,5], dpi = 120)
labels = ["Yes", "No"]

plt.pie([Yes, No], labels = labels, autopct = "%0.2f%%")
plt.title("Diabetes Patients Taking Medicine", fontdict = {"fontweight": "bold"})

plt.legend()
plt.show()

"""77% of patients are taking their medicines while 23% are not taking medicine."""